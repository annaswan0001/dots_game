{"version":3,"sources":["state/actionsTypes.js","state/reducer.js","api/api.jsx","components/GameField/Cell.jsx","components/GameField/GameField.jsx","components/LeaderBoard/LeaderList.jsx","components/LeaderBoard/LeaderBoard.jsx","components/SettingMode/SettingMode.jsx","components/Loader/Loader.jsx","Game.js","utils/dateFormat.js","index.js"],"names":["actionsTypes","REQUEST_DATA","ERROR_DATA","SET_WINNERS","SET_SETTINGS","SET_USER","SET_MODE","SET_DELAY","SET_FIELD_SIZE","SET_FIELD_ARRAY","START_GAME","FINISH_GAME","SET_GAME_PERMISSION","CLICK_SQUARE","SET_SQUARE_BLUE","SET_SQUARE_RED","GameContext","React","createContext","isLoading","isError","settings","user","mode","field","delay","size","isGameStart","isGameFinish","winners","winner","reducer","state","action","type","payload","SET_GAME_DELAY","isBlueSquare","map","square","index","isGreenSquare","disabled","id","isRedSquare","isDisabled","isAvailable","Error","instance","axios","create","baseURL","Cell","onClick","btnClass","cn","btn","className","useStyles","makeStyles","theme","center","margin","GameField","handleCkickSquare","useState","window","innerWidth","isDesktop","setDesktop","classes","updateMedia","useEffect","addEventListener","removeEventListener","boardStandart","useMemo","val","Fragment","key","boardSmallDevice","renderBoard","Grid","item","LeaderList","date","LeaderBoard","i","formControl","width","input","padding","minWidth","textAlign","label","transform","button","color","backgroundColor","cyan","breakpoints","down","buttonDisabled","SettingMode","setGameMode","dispatch","xs","sm","lg","FormControl","variant","InputLabel","root","Select","FilledInput","labelId","value","onChange","e","target","Object","keys","set","MenuItem","TextField","error","length","helperText","md","justify","container","Button","contained","array","Array","fill","Loder","el","mainGrid","spacing","border","minHeight","paddingTop","up","createField","fieldSize","fieldArr","push","Game","useContext","all","get","then","spread","responses","data","reverse","catch","errors","Swal","fire","title","text","icon","confirmButtonText","useCallback","gameMode","fieldArray","interval","setInterval","gameInterval","fieldCopy","blueSquareArray","filter","greenSquareArray","redSquareArray","availableSquaresArray","currentSquareId","Math","round","clearInterval","randomSquare","floor","random","clearTimeout","Date","formatDate","toLocaleDateString","month","year","getHours","getMinutes","getDate","slice","dateFormat","post","setWinner","res","SettingModeMemo","LeaderBoardMemo","GameFieldMemo","Container","maxWidth","direction","alignItems","App","initialState","useReducer","Provider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.23364828.chunk.js","sourcesContent":["\n\nexport const actionsTypes = { \n    REQUEST_DATA:\"REQUEST_DATA\",\n    ERROR_DATA:\"ERROR_DATA\",\n    SET_WINNERS: \"SET_WINNERS\",\n    SET_SETTINGS: \"SET_SETTINGS\",\n    SET_USER:\"SET_USER\",\n    SET_MODE:\"SET_MODE\",\n    SET_DELAY:\"SET_DELAY\",\n    SET_FIELD_SIZE:\"SET_FIELD_SIZE\",\n    SET_FIELD_ARRAY:\"SET_FIELD_ARRAY\",\n    START_GAME:\"START_GAME\",\n    FINISH_GAME:\"FINISH_GAME\",\n    SET_GAME_PERMISSION:\"SET_GAME_PERMISSION\",\n    CLICK_SQUARE:\"CLICK_SQUARE\",\n    SET_SQUARE_BLUE:\"SET_SQUARE_BLUE\",\n    SET_SQUARE_RED:\"SET_SQUARE_RED\",\n}","import React from \"react\";\nimport { actionsTypes } from \"./actionsTypes\";\n\nexport const GameContext = React.createContext({\n  isLoading:false, \n  isError:false,\n  settings: null,\n  user:\"\",\n  mode:\"\",\n  field: [],\n  delay: null,\n  size: null,\n  isGameStart: false,\n  isGameFinish: false,\n  winners: null,\n  winner: \"\",\n});\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case actionsTypes.REQUEST_DATA: {\n      return { ...state, isLoading:true, isError:false};\n    }\n    case actionsTypes.ERROR_DATA: {\n      return { ...state, isError:true, isLoading:false };\n    }\n    case actionsTypes.SET_SETTINGS: {\n      return { ...state, settings: action.payload.settings, winners:action.payload.winners, isLoading:false };\n    }\n    case actionsTypes.SET_USER: {\n      return { ...state, user: action.payload };\n    }\n    case actionsTypes.SET_MODE: {\n      return { ...state, mode: action.payload, size: state.settings[action.payload].field, delay:state.settings[action.payload].delay };\n    }\n    case actionsTypes.SET_GAME_DELAY: {\n      return { ...state, delay: action.payload };\n    }\n    case actionsTypes.SET_FIELD_SIZE: {\n      return { ...state, size: action.payload };\n    }\n    case actionsTypes.SET_WINNERS: {\n      return { ...state, winners: action.payload };\n    }\n    case actionsTypes.SET_FIELD_ARRAY: {\n      return { ...state, field: action.payload };\n    }\n    case actionsTypes.START_GAME: {\n      return { ...state, isGameStart: true };\n    }\n    case actionsTypes.FINISH_GAME: {\n      return {\n        ...state,\n        isGameFinish: true,\n        isGameStart: false,\n        winner: action.payload,\n      };\n    }\n    case actionsTypes.SET_GAME_PERMISSION: {\n      return {\n        ...state,\n        isGameFinish: false,\n        winner: \"\",\n      };\n    }\n    case actionsTypes.CLICK_SQUARE: {\n      if (state.field[action.payload].isBlueSquare) {\n        return {\n          ...state,\n          field: state.field.map((square, index) =>\n            index === action.payload\n              ? {\n                  ...square,\n                  isBlueSquare: false,\n                  isGreenSquare: true,\n                  disabled: true,\n                }\n              : square\n          ),\n        };\n      } else {\n        return state;\n      }\n    }\n    case actionsTypes.SET_SQUARE_RED: {\n      return {\n        ...state,\n        field: state.field.map((square) =>\n          square.id === action.payload\n            ? {\n                ...square,\n                isBlueSquare: false,\n                isRedSquare: true,\n                isDisabled: true,\n              }\n            : square\n        ),\n      };\n    }\n    case actionsTypes.SET_SQUARE_BLUE: {\n      return {\n        ...state,\n        field: state.field.map((square) =>\n          square.id === action.payload\n            ? {\n                ...square,\n                isBlueSquare: true,\n                isRedSquare: false,\n                isAvailable: false,\n              }\n            : square\n        ),\n      };\n    }\n    default: {\n      throw new Error();\n    }\n  }\n}\nexport default reducer;\n","import axios from'axios'\n\n\nconst instance = axios.create({\n  baseURL: \"https://starnavi-frontend-test-task.herokuapp.com/\",\n});\n\nexport function getSettings() {\n  return instance.get(`/game-settings`);\n}\nexport function getWinners() {\n  return instance.get(\"/winners\");\n}\nexport function setWinner(winner, date) {\n  return instance.post(`/winners`, {winner, date});\n}\n\nexport default instance","import React from \"react\";\nimport './Cell.scss'\nimport cn from \"classnames\";\nimport PropTypes from 'prop-types'\n\nconst Cell = ({ isGreenSquare, isRedSquare, isBlueSquare, onClick, size }) => {\n  \n  let btnClass = cn({\n     btn: true,\n    \"btn-blue\": isBlueSquare,\n    \"btn-red\": isRedSquare,\n    \"btn-green\": isGreenSquare,\n    \"btn-small\": size === 5,\n    \"btn-medium\":size===10,\n    \"btn-large\":size===15\n  });\n\n  return <button onClick={onClick} className={btnClass}></button>;\n};\n\nCell.propTypes = {\n  isGreenSquare: PropTypes.bool,\n  isRedSquare : PropTypes.bool, \n  isBlueSquare : PropTypes.bool,\n  onClick: PropTypes.func,\n  size:PropTypes.number\n};\n\nexport default Cell;\n","import React, { useEffect, useState, useMemo } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport PropTypes from \"prop-types\";\n//components\nimport Cell from \"./Cell\";\n\nconst useStyles = makeStyles((theme) => ({\n  center: {\n    margin: \"0 auto\",\n  },\n}));\n\nfunction GameField({ handleCkickSquare, size, field }) {\n  const [isDesktop, setDesktop] = useState(window.innerWidth > 576);\n  const classes = useStyles();\n\n  const updateMedia = () => {\n    setDesktop(window.innerWidth > 576);\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", updateMedia);\n    return () => window.removeEventListener(\"resize\", updateMedia);\n  });\n\n  const boardStandart = useMemo(\n    () =>\n      field.map((val, index) => {\n        if ((index + 1) % size === 0) {\n          return (\n            <React.Fragment key={val.id}>\n              <Cell\n                key={val.id}\n                {...val}\n                size={size}\n                onClick={() => handleCkickSquare(index)}\n              />\n              <p />\n            </React.Fragment>\n          );\n        } else {\n          return (\n            <Cell\n              size={size}\n              key={val.id}\n              {...val}\n              onClick={() => handleCkickSquare(index)}\n            />\n          );\n        }\n      }),\n    [field, size, handleCkickSquare]\n  );\n\n  const boardSmallDevice = useMemo(\n    () =>\n      field.map((val, index) => {\n        return (\n          <React.Fragment key={val.id}>\n            <Cell\n              key={val.id}\n              {...val}\n              size={size}\n              onClick={() => handleCkickSquare(index)}\n            />\n          </React.Fragment>\n        );\n      }),\n    [field, handleCkickSquare, size]\n  );\n\n  let renderBoard = useMemo(() => {\n    if (!isDesktop && size === 15) {\n      return boardSmallDevice;\n    } else return boardStandart;\n  }, [isDesktop, size, boardSmallDevice, boardStandart]);\n\n  return (\n    <Grid classes={{ item: classes.center }} item>\n      <div> {renderBoard}</div>\n    </Grid>\n  );\n}\n\nGameField.propTypes = {\n  handleCkickSquare: PropTypes.func,\n  size: PropTypes.number,\n  field: PropTypes.arrayOf(PropTypes.object),\n};\nexport default GameField;\n","import React from \"react\";\nimport PropTypes from 'prop-types'\n\nfunction LeaderList({ winner }) {\n  return (\n    <div className=\"leaders_item\">\n      <div className=\"leaders_item-row\">\n        <p> {winner.winner}</p>\n        <p>{winner.date}</p>\n      </div>\n    </div>\n  );\n}\n\n\nLeaderList.propTypes = {\n  winner: PropTypes.object\n};\n\nexport default LeaderList \n\n","import React from \"react\";\nimport \"./LeaderBoard.scss\";\nimport LeaderList from \"./LeaderList\";\nimport PropTypes from 'prop-types'\n\n\nconst LeaderBoard = ({ winners }) => {\n\n  return (\n    <div className=\"leaders\">\n      <h1 className=\"leaders_title\">Leader Board</h1>\n      {winners &&\n        winners.map((winner, i) => {\n            return <LeaderList key={winner.id} winner={winner} />;\n        })}\n    </div>\n  );\n};\n\nLeaderBoard.propTypes = {\n    winners: PropTypes.arrayOf(PropTypes.object)\n};\n\nexport default LeaderBoard;\n\n","import React from \"react\";\nimport {\n  Grid,\n  InputLabel,\n  Select,\n  MenuItem,\n  TextField,\n  Button,\n  FormControl,\n  FilledInput,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport cyan from \"@material-ui/core/colors/cyan\";\nimport PropTypes from 'prop-types'\n//state\nimport { actionsTypes } from \"../../state/actionsTypes\";\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    width: \"100%\",\n  },\n  input: {\n    padding: \"23px 12px 6px\",\n    minWidth: \"145px\",\n    textAlign: \"left\",\n  },\n  label: {\n    transform: \"translate(12px, 18px) scale(1)\",\n  },\n  button: {\n    padding: \"12px 50px\",\n    color: \"#fff\",\n    backgroundColor: cyan[800],\n    \"&:hover\": {\n      backgroundColor: cyan[900],\n    },\n    [theme.breakpoints.down(\"md\")]: {\n      width: \"100%\",\n    },\n  },\n  buttonDisabled: {\n    backgroundColor: \"#7B8D93 !important\",\n    color: \"#fff !important\",\n  },\n}));\n\nfunction SettingMode({\n  setGameMode,\n  settings,\n  mode,\n  isGameStart,\n  isGameFinish,\n  user,\n  dispatch,\n}) {\n  const classes = useStyles();\n\n\n  return (\n    <>\n      <Grid item xs={12} sm={6} lg={4}>\n        <FormControl variant=\"filled\" className={classes.formControl}>\n          <InputLabel classes={{ root: classes.label }} id=\"select-mode-label\">\n            Pick game mode\n          </InputLabel>\n          <Select\n            input={<FilledInput classes={{ input: classes.input }} />}\n            labelId=\"select-mode-label\"\n            id=\"select-mode\"\n            value={mode}\n            label=\"Pick game mode\"\n            disabled={isGameStart}\n            onChange={(e) => setGameMode(e.target.value)}\n          >\n            {settings &&\n              Object.keys(settings).map((set, i) => (\n                <MenuItem key={set} value={set}>\n                  {set}\n                </MenuItem>\n              ))}\n          </Select>\n        </FormControl>\n      </Grid>\n      <Grid xs={12} sm={6} item lg={4}>\n        <FormControl className={classes.formControl}>\n          <TextField\n            error={user.length >= 10 ? true : false}\n            size=\"small\"\n            label=\"Enter your name\"\n            variant=\"filled\"\n            onChange={(e) =>\n              dispatch({ type: actionsTypes.SET_USER, payload: e.target.value })\n            }\n            disabled={isGameStart}\n            value={user}\n            helperText=\"Max 10 length\"\n          />\n        </FormControl>\n      </Grid>\n      <Grid xs={12} sm={6} md={12} item justify=\"center\" container lg={4}>\n        <Button\n          onClick={() => dispatch({ type: actionsTypes.START_GAME })}\n          classes={{\n            root: classes.button,\n            disabled: classes.buttonDisabled,\n            contained: classes.buttonDisabled,\n          }}\n          color=\"primary\"\n          className={classes.button}\n          disabled={!mode || !user || isGameStart || user.length >= 10}\n        >\n          {isGameFinish ? \"Play again\" : \"Play\"}\n        </Button>\n      </Grid>\n    </>\n  );\n}\n\nSettingMode.propTypes = {\n  setGameMode : PropTypes.func,\n  settings: PropTypes.shape({\n    field: PropTypes.string,\n    delay: PropTypes.number\n  }),\n  mode:PropTypes.string,\n  isGameStart:PropTypes.bool,\n  isGameFinish:PropTypes.bool,\n  user:PropTypes.string,\n  dispatch:PropTypes.func,\n};\n\nexport default SettingMode;\n","import React from \"react\";\nimport './Loader.scss'\n\n\nlet array = new Array(10).fill(\"element\");\nexport default function Loder() {\n \n  return (\n    <div className=\"loader\">\n       {array && array.map((el,i)=>{\n         return <span key={i} className=\"loader-block\"></span>\n       })}\n   \n    </div>\n  );\n}\n\n\n","import React, { useEffect, useContext, useMemo, useCallback } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Grid, Container } from \"@material-ui/core\";\nimport axios from \"axios\";\n//error alert\nimport Swal from \"sweetalert2/dist/sweetalert2.js\";\nimport \"sweetalert2/src/sweetalert2.scss\";\n//api\nimport { getSettings, getWinners, setWinner } from \"./api/api\";\n//state\nimport { GameContext } from \"./state/reducer\";\nimport { actionsTypes } from \"./state/actionsTypes\";\n//components\nimport GameField from \"./components/GameField/GameField\";\nimport LeaderBoard from \"./components/LeaderBoard/LeaderBoard\";\nimport SettingMode from \"./components/SettingMode/SettingMode\";\nimport Loader from \"./components/Loader/Loader\";\n//utils\nimport { dateFormat } from \"./utils/dateFormat\";\n\n\n//styles for MUI\nconst useStyles = makeStyles((theme) => ({\n  mainGrid: {\n    padding: theme.spacing(1),\n    border: \"2px solid #E7E7E9\",\n    minHeight: \"100vh\",\n    paddingTop: \"10%\",\n    [theme.breakpoints.up(\"md\")]: {\n      padding: theme.spacing(6),\n    },\n  },\n}));\n\n\nconst createField = (fieldSize) => {\n  let fieldArr = [];\n  for (let i = 0; i < fieldSize * fieldSize; i++) {\n    let square = {\n      id: i,\n      isGreenSquare: false,\n      isRedSquare: false,\n      isBlueSquare: false,\n      isAvailable: true,\n      isDisabled: false,\n    };\n    fieldArr.push(square);\n  }\n\n  return fieldArr;\n};\n\nfunction Game() {\n  const classes = useStyles();\n  const { state, dispatch } = useContext(GameContext);\n\n  const {\n    settings,\n    isGameStart,\n    size,\n    field,\n    delay,\n    isGameFinish,\n    winner,\n    user,\n    mode,\n    winners,\n    isLoading,\n  } = state;\n\n  //initial settings-data for game andleader board\n  useEffect(() => {\n    dispatch({ type: actionsTypes.REQUEST_DATA });\n    axios\n      .all([getSettings(), getWinners()])\n      .then(\n        axios.spread((...responses) => {\n          const [settings, winners] = responses;\n          dispatch({\n            type: actionsTypes.SET_SETTINGS,\n            payload: {\n              settings: settings.data,\n              winners: winners.data.reverse(),\n            },\n          });\n        })\n      )\n      .catch((errors) => {\n        dispatch({ type: actionsTypes.ERROR_DATA });\n        Swal.fire({\n          title: \"Error!\",\n          text: \"We are sorry! Something go wrong! Try later!\",\n          icon: \"error\",\n          confirmButtonText: \"Cool\",\n        });\n      });\n  }, [dispatch]);\n\n  \n   //handler for select mode\n  const setGameMode = useCallback(\n    (gameMode) => {\n      dispatch({ type: actionsTypes.SET_MODE, payload: gameMode });\n      if (isGameFinish) {\n        dispatch({ type: actionsTypes.SET_GAME_PERMISSION });\n      }\n    },\n    [dispatch, isGameFinish]\n  );\n\n  \n  const handleCkickSquare = useCallback(\n    (index) => {\n      dispatch({ type: actionsTypes.CLICK_SQUARE, payload: index });\n    },\n    [dispatch]\n  );\n\n\n  useEffect(() => {\n    if (size) {\n      let fieldArray = createField(size);\n      dispatch({ type: actionsTypes.SET_FIELD_ARRAY, payload: fieldArray });\n    }\n  }, [size, dispatch]);\n\n\n  //create new field after finish previous game, clear results\n  useEffect(() => {\n    if (isGameStart && isGameFinish) {\n      let fieldArray = createField(size);\n      dispatch({ type: actionsTypes.SET_FIELD_ARRAY, payload: fieldArray });\n      dispatch({ type: actionsTypes.SET_GAME_PERMISSION, payload: \"\" });\n    }\n  }, [isGameStart, size, isGameFinish, dispatch]);\n\n  //set game inteval\n  useEffect(() => {\n    let interval;\n    if (isGameStart && !isGameFinish) {\n      let gameInterval = () => {\n        let fieldCopy = [...field];\n        let blueSquareArray = fieldCopy.filter((square) => {\n          return square.isBlueSquare;\n        });\n        let greenSquareArray = fieldCopy.filter(\n          (square) => square.isGreenSquare\n        );\n        let redSquareArray = fieldCopy.filter((square) => square.isRedSquare);\n        let availableSquaresArray = fieldCopy.filter(\n          (square) => square.isAvailable\n        );\n\n        if (blueSquareArray.length) {\n          let currentSquareId = blueSquareArray[0].id;\n          dispatch({\n            type: actionsTypes.SET_SQUARE_RED,\n            payload: currentSquareId,\n          });\n        }\n        if (greenSquareArray.length === Math.round((size * size) / 2)) {\n          clearInterval(gameInterval);\n          dispatch({ type: actionsTypes.FINISH_GAME, payload: user });\n        } else if (redSquareArray.length === Math.round((size * size) / 2)) {\n          clearInterval(gameInterval);\n          dispatch({ type: actionsTypes.FINISH_GAME, payload: \"Computer\" });\n        } else {\n          if (availableSquaresArray.length) {\n            const randomIndex = Math.floor(\n              Math.random() * availableSquaresArray.length\n            );\n            const randomSquare = availableSquaresArray[randomIndex].id;\n            dispatch({\n              type: actionsTypes.SET_SQUARE_BLUE,\n              payload: randomSquare,\n            });\n          }\n        }\n      };\n      interval = setInterval(gameInterval, delay);\n    }\n    return () => {\n      clearTimeout(interval);\n    };\n  }, [isGameStart, isGameFinish, size, dispatch, user, delay, field]);\n\n  useEffect(() => {\n    if (isGameFinish) {\n      let date = dateFormat();\n      setWinner(winner, date)\n        .then((res) =>\n          dispatch({\n            type: actionsTypes.SET_WINNERS,\n            payload: res.data.reverse(),\n          })\n        )\n        .catch(() => {\n          Swal.fire({\n            title: \"Can't get winners!\",\n            text: \"Try it later\",\n            icon: \"error\",\n            confirmButtonText: \"Cool\",\n          });\n        });\n    }\n  }, [isGameFinish, dispatch, winner]);\n\n\n//for all child use UseMemo for preventing unnessary rerendering\n  const SettingModeMemo = useMemo(() => {\n    return (\n      <SettingMode\n        settings={settings}\n        setGameMode={setGameMode}\n        mode={mode}\n        isGameStart={isGameStart}\n        isGameFinish={isGameFinish}\n        dispatch={dispatch}\n        user={user}\n      />\n    );\n  }, [settings, setGameMode, mode, isGameStart, isGameFinish, user, dispatch]);\n\n  const LeaderBoardMemo = useMemo(() => {\n    return <LeaderBoard winners={winners} />;\n  }, [winners]);\n\n  const GameFieldMemo = useMemo(() => {\n    return (\n      <GameField\n        size={size}\n        field={field}\n        handleCkickSquare={handleCkickSquare}\n        dispatch={dispatch}\n      />\n    );\n  }, [handleCkickSquare, dispatch, size, field]);\n\n  return (\n    <Container maxWidth=\"xl\">\n      <main>\n        {isLoading ? (\n          <Loader />\n        ) : (\n          <Grid\n            className={classes.mainGrid}\n            container\n            direction=\"row\"\n            alignItems=\"flex-start\"\n            spacing={2}\n          >\n            <Grid\n              justify=\"center\"\n              container\n              item\n              spacing={2}\n              alignItems=\"flex-start\"\n              md={6}\n            >\n              {SettingModeMemo}\n\n              <Grid item xs={12}>\n                {winner && (\n                  <h3> {winner} win! </h3>\n                )}\n              </Grid>\n              {GameFieldMemo}\n            </Grid>\n            <Grid container alignItems=\"center\" item md={6}>\n              {LeaderBoardMemo}\n            </Grid>\n          </Grid>\n        )}\n      </main>\n    </Container>\n  );\n}\n\nexport default Game;\n"," export function dateFormat (){\n    const date = new Date()\n    let options = {\n      month: 'long',\n      year: 'numeric',\n    };\n    let formatDate =date.toLocaleDateString(\"en-US\", options);\n    let customDate =`${date.getHours()}:${(date.getMinutes()<10?'0':'') + date.getMinutes()}; ${(\"0\" + date.getDate()).slice(-2)} ${formatDate}`\n    return customDate\n}","import React, { useContext, useReducer } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\n\n//context/reducer\nimport { GameContext } from \"./state/reducer\";\nimport reducer from \"./state/reducer\";\n//component\nimport Game from \"./Game\";\n\nconst App = () => {\n  const initialState = useContext(GameContext);\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <GameContext.Provider value={{ state, dispatch }}>\n      <Game />\n    </GameContext.Provider>\n  );\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}