{"version":3,"sources":["state/actionsTypes.js","state/reducer.js","api/api.jsx","components/GameField/Cell.jsx","components/GameField/GameField.jsx","components/LeaderBoard/LeaderList.jsx","components/LeaderBoard/LeaderBoard.jsx","components/SettingMode/SettingMode.jsx","utils/dateFormat.js","components/Loader/Loader.jsx","Game.js","index.js"],"names":["actionsTypes","SET_WINNERS","SET_SETTINGS","SET_USERNAME","SET_DELAY","SET_FIELD_SIZE","SET_FIELD_ARRAY","START_GAME","FINISH_GAME","SET_GAME_PERMISSION","CLICK_SQUARE","SET_SQUARE_BLUE","SET_SQUARE_RED","GameContext","React","createContext","settings","field","delay","size","isGameStart","isGameFinish","winners","winner","reducer","state","action","type","payload","SET_GAME_DELAY","isBlueSquare","map","square","index","isGreenSquare","disabled","id","isRedSquare","isDisabled","isAvailable","Error","instance","axios","create","baseURL","Cell","onClick","btnClass","cn","btn","className","useStyles","makeStyles","theme","center","margin","GameField","useContext","dispatch","useState","window","innerWidth","isDesktop","setDesktop","classes","updateMedia","useEffect","addEventListener","removeEventListener","handleCkickSquare","useCallback","boardStandart","useMemo","val","Fragment","key","boardSmallDevice","renderBoard","Grid","item","LeaderList","date","LeaderBoard","i","formControl","width","input","padding","minWidth","textAlign","label","transform","button","color","backgroundColor","cyan","breakpoints","down","buttonDisabled","createField","fieldSize","fieldArr","push","SettingMode","mode","setMode","user","setUserName","fieldArray","interval","setInterval","gameInterval","fieldCopy","blueSquareArray","filter","greenSquareArray","redSquareArray","availableSquaresArray","length","currentSquareId","Math","round","clearInterval","randomSquare","floor","random","clearTimeout","Date","formatDate","toLocaleDateString","month","year","getHours","getMinutes","getDate","slice","dateFormat","post","setWinner","then","res","data","reverse","xs","sm","lg","FormControl","variant","InputLabel","root","Select","FilledInput","labelId","value","onChange","e","target","Object","keys","set","MenuItem","TextField","error","helperText","md","justify","container","Button","contained","style","array","Array","fill","Loder","el","mainGrid","spacing","border","minHeight","paddingTop","up","Game","isLoading","setIsLoading","isError","setIsError","all","get","spread","responses","catch","errors","finally","LeaderBoardMemo","Container","maxWidth","direction","alignItems","App","initialState","useReducer","Provider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b26ed751.chunk.js","sourcesContent":["\n\nexport const actionsTypes = {\n    SET_WINNERS: \"SET_WINNERS\", \n    SET_SETTINGS: \"SET_SETTINGS\",\n    SET_USERNAME:\"SER_USERNAME\",\n    SET_DELAY:\"SET_DELAY\",\n    SET_FIELD_SIZE:\"SET_FIELD_SIZE\",\n    SET_FIELD_ARRAY:\"SET_FIELD_ARRAY\",\n    START_GAME:\"START_GAME\",\n    FINISH_GAME:\"FINISH_GAME\",\n    SET_GAME_PERMISSION:\"SET_GAME_PERMISSION\",\n    CLICK_SQUARE:\"CLICK_SQUARE\",\n    SET_SQUARE_BLUE:\"SET_SQUARE_BLUE\",\n    SET_SQUARE_RED:\"SET_SQUARE_RED\",\n}","import React from \"react\";\nimport { actionsTypes } from \"./actionsTypes\";\n\nexport const GameContext = React.createContext({\n  settings: null,\n  field: [],\n  delay: null,\n  size: null,\n  isGameStart: false,\n  isGameFinish: false,\n  winners: null,\n  winner: \"\",\n});\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case actionsTypes.SET_SETTINGS: {\n      return { ...state, settings: action.payload };\n    }\n    case actionsTypes.SET_GAME_DELAY: {\n      return { ...state, delay: action.payload };\n    }\n    case actionsTypes.SET_FIELD_SIZE: {\n      return { ...state, size: action.payload };\n    }\n    case actionsTypes.SET_WINNERS: {\n      return { ...state, winners: action.payload };\n    }\n    case actionsTypes.SET_FIELD_ARRAY: {\n      return { ...state, field: action.payload };\n    }\n    case actionsTypes.START_GAME: {\n      return { ...state, isGameStart: true };\n    }\n    case actionsTypes.FINISH_GAME: {\n      return {\n        ...state,\n        isGameFinish: true,\n        isGameStart: false,\n        winner: action.payload,\n      };\n    }\n    case actionsTypes.SET_GAME_PERMISSION: {\n      return {\n        ...state,\n        isGameFinish: false,\n        winner: \"\",\n      };\n    }\n    case actionsTypes.CLICK_SQUARE: {\n      if (state.field[action.payload].isBlueSquare) {\n        return {\n          ...state,\n          field: state.field.map((square, index) =>\n            index === action.payload\n              ? {\n                  ...square,\n                  isBlueSquare: false,\n                  isGreenSquare: true,\n                  disabled: true,\n                }\n              : square\n          ),\n        };\n      } else {\n        return state;\n      }\n    }\n    case actionsTypes.SET_SQUARE_RED: {\n      return {\n        ...state,\n        field: state.field.map((square) =>\n          square.id === action.payload\n            ? {\n                ...square,\n                isBlueSquare: false,\n                isRedSquare: true,\n                isDisabled: true,\n              }\n            : square\n        ),\n      };\n    }\n    case actionsTypes.SET_SQUARE_BLUE: {\n      return {\n        ...state,\n        field: state.field.map((square) =>\n          square.id === action.payload\n            ? {\n                ...square,\n                isBlueSquare: true,\n                isRedSquare: false,\n                isAvailable: false,\n              }\n            : square\n        ),\n      };\n    }\n    default: {\n      throw new Error();\n    }\n  }\n}\nexport default reducer;\n","import axios from'axios'\n\n\nconst instance = axios.create({\n  baseURL: \"https://starnavi-frontend-test-task.herokuapp.com/\",\n});\n\nexport function getSettings() {\n  return instance.get(`/game-settings`);\n}\nexport function getWinners() {\n  return instance.get(\"/winners\");\n}\nexport function setWinner(winner, date) {\n  return instance.post(`/winners`, {winner, date});\n}\n\nexport default instance","import React from \"react\";\nimport './Cell.scss'\nimport cn from \"classnames\";\nimport PropTypes from 'prop-types'\n\nconst Cell = ({ isGreenSquare, isRedSquare, isBlueSquare, onClick, size }) => {\n  \n  let btnClass = cn({\n     btn: true,\n    \"btn-blue\": isBlueSquare,\n    \"btn-red\": isRedSquare,\n    \"btn-green\": isGreenSquare,\n    \"btn-small\": size === 5,\n    \"btn-medium\":size===10,\n    \"btn-large\":size===15\n  });\n\n  return <button onClick={onClick} className={btnClass}></button>;\n};\n\nCell.propTypes = {\n  isGreenSquare: PropTypes.bool,\n  isRedSquare : PropTypes.bool, \n  isBlueSquare : PropTypes.bool,\n  onClick: PropTypes.func,\n  size:PropTypes.number\n};\n\nexport default Cell;\n","import React, {\n  useContext,\n  useCallback,\n  useEffect,\n  useState,\n  useMemo,\n} from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n//state\nimport { GameContext } from \"../../state/reducer\";\nimport { actionsTypes } from \"../../state/actionsTypes\";\n//components\nimport Cell from \"./Cell\";\n\nconst useStyles = makeStyles((theme) => ({\n  center: {\n    margin: \"0 auto\",\n  },\n}));\n\nfunction GameField() {\n  const { state, dispatch } = useContext(GameContext);\n  const { size, field } = state;\n  const [isDesktop, setDesktop] = useState(window.innerWidth > 576);\n  const classes = useStyles();\n\n  const updateMedia = () => {\n    setDesktop(window.innerWidth > 576);\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", updateMedia);\n    return () => window.removeEventListener(\"resize\", updateMedia);\n  });\n\n  const handleCkickSquare = useCallback(\n    (index) => {\n      dispatch({ type: actionsTypes.CLICK_SQUARE, payload: index });\n    },\n    [dispatch]\n  );\n\n  const boardStandart = useMemo(\n    () =>\n      field.map((val, index) => {\n        if ((index + 1) % size === 0) {\n          return (\n            <React.Fragment key={val.id}>\n              <Cell\n                key={val.id}\n                {...val}\n                size={size}\n                onClick={() => handleCkickSquare(index)}\n              />\n              <p />\n            </React.Fragment>\n          );\n        } else {\n          return (\n            <Cell\n              size={size}\n              key={val.id}\n              {...val}\n              onClick={() => handleCkickSquare(index)}\n            />\n          );\n        }\n      }),\n    [field, size, handleCkickSquare]\n  );\n\n  const boardSmallDevice = useMemo(\n    () =>\n      field.map((val, index) => {\n        return (\n          <React.Fragment key={val.id}>\n            <Cell\n              key={val.id}\n              {...val}\n              size={size}\n              onClick={() => handleCkickSquare(index)}\n            />\n          </React.Fragment>\n        );\n      }),\n    [field, handleCkickSquare, size]\n  );\n\n  let renderBoard = useMemo(() => {\n    if (!isDesktop && size === 15) {\n      return boardSmallDevice;\n    } else return boardStandart;\n  }, [isDesktop, size, boardSmallDevice, boardStandart]);\n\n  return (\n    <Grid classes={{ item: classes.center }} item>\n      <div> {renderBoard}</div>\n    </Grid>\n  );\n}\n\nexport default GameField;\n","import React from \"react\";\nimport PropTypes from 'prop-types'\n\nfunction LeaderList({ winner }) {\n  return (\n    <div className=\"leaders_item\">\n      <div className=\"leaders_item-row\">\n        <p> {winner.winner}</p>\n        <p>{winner.date}</p>\n      </div>\n    </div>\n  );\n}\n\n\nLeaderList.propTypes = {\n  winners: PropTypes.string\n};\n\nexport default LeaderList \n\n","import React from \"react\";\nimport \"./LeaderBoard.scss\";\nimport LeaderList from \"./LeaderList\";\nimport PropTypes from 'prop-types'\n\n\nconst LeaderBoard = ({ winners }) => {\n\n \n  return (\n    <div className=\"leaders\">\n      <h1 className=\"leaders_title\">Leader Board</h1>\n      {winners &&\n        winners.map((winner, i) => {\n            return <LeaderList key={winner.id} winner={winner} />;\n        })}\n    </div>\n  );\n};\n\nLeaderBoard.propTypes = {\n    winners: PropTypes.arrayOf(PropTypes.object)\n};\n\nexport default LeaderBoard;\n\n","import React, { useState, useEffect, useContext } from \"react\";\nimport {\n  Grid,\n  InputLabel,\n  Select,\n  MenuItem,\n  TextField,\n  Button,\n  FormControl,\n  FilledInput,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport cyan from \"@material-ui/core/colors/cyan\";\n//api\nimport { setWinner } from \"../../api/api\";\n//state\nimport { GameContext } from \"../../state/reducer\";\nimport { actionsTypes } from \"../../state/actionsTypes\";\n//utils\nimport { dateFormat } from \"../../utils/dateFormat\";\n\n\n\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    width: \"100%\",\n  },\n  input: {\n    padding: \"23px 12px 6px\",\n    minWidth: \"145px\",\n    textAlign: \"left\",\n  },\n  label: {\n    transform: \"translate(12px, 18px) scale(1)\",\n  },\n  button: {\n    padding: \"12px 50px\",\n    color: \"#fff\",\n    backgroundColor: cyan[800],\n    \"&:hover\": {\n      backgroundColor: cyan[900],\n    },\n    [theme.breakpoints.down(\"md\")]: {\n      width: \"100%\",\n    },\n  },\n  buttonDisabled: {\n    backgroundColor: \"#7B8D93 !important\",\n    color: \"#fff !important\",\n  },\n}));\n\nconst createField = (fieldSize) => {\n  let fieldArr = [];\n  for (let i = 0; i < fieldSize * fieldSize; i++) {\n    let square = {\n      id: i,\n      isGreenSquare: false,\n      isRedSquare: false,\n      isBlueSquare: false,\n      isAvailable: true,\n      isDisabled: false,\n    };\n    fieldArr.push(square);\n  }\n\n  return fieldArr;\n};\n\nfunction SettingMode() {\n  const classes = useStyles();\n  const { state, dispatch } = useContext(GameContext);\n  const [mode, setMode] = useState(\"\");\n  const [user, setUserName] = useState(\"\");\n\n  const {\n    settings,\n    isGameStart,\n    size,\n    field,\n    delay,\n    isGameFinish,\n    winner,\n  } = state;\n\n\n\n  useEffect(() => {\n    if (mode) {\n      dispatch({\n        type: actionsTypes.SET_FIELD_SIZE,\n        payload: settings[mode].field,\n      });\n      dispatch({\n        type: actionsTypes.SET_GAME_DELAY,\n        payload: settings[mode].delay,\n      });\n      dispatch({ type: actionsTypes.SET_GAME_PERMISSION });\n    }\n  }, [mode, dispatch, settings]);\n\n  useEffect(() => {\n    if (size) {\n      let fieldArray = createField(size);\n      dispatch({ type: actionsTypes.SET_FIELD_ARRAY, payload: fieldArray });\n    }\n  }, [size, dispatch]);\n\n\n\n\n  useEffect(() => {\n    if (isGameStart && isGameFinish) {\n      let fieldArray = createField(size);\n      dispatch({ type: actionsTypes.SET_FIELD_ARRAY, payload: fieldArray });\n      dispatch({ type: actionsTypes.SET_GAME_PERMISSION, payload: \"\" });\n    }\n  }, [isGameStart, size, isGameFinish, dispatch]);\n\n\n\n  useEffect(() => {\n    let interval;\n    if (isGameStart && !isGameFinish) {\n      let gameInterval = () => {\n        let fieldCopy = [...field];\n        let blueSquareArray = fieldCopy.filter((square) => {\n          return square.isBlueSquare;\n        });\n        let greenSquareArray = fieldCopy.filter(\n          (square) => square.isGreenSquare\n        );\n        let redSquareArray = fieldCopy.filter((square) => square.isRedSquare);\n        let availableSquaresArray = fieldCopy.filter(\n          (square) => square.isAvailable\n        );\n\n        if (blueSquareArray.length) {\n          let currentSquareId = blueSquareArray[0].id;\n          dispatch({\n            type: actionsTypes.SET_SQUARE_RED,\n            payload: currentSquareId,\n          });\n        }\n        if (greenSquareArray.length === Math.round((size * size) / 2)) {\n          clearInterval(gameInterval);\n          dispatch({ type: actionsTypes.FINISH_GAME, payload: user });\n        } else if (redSquareArray.length === Math.round((size * size) / 2)) {\n          clearInterval(gameInterval);\n          dispatch({ type: actionsTypes.FINISH_GAME, payload: \"Computer\" });\n        } else {\n          if (availableSquaresArray.length) {\n            const randomIndex = Math.floor(\n              Math.random() * availableSquaresArray.length\n            );\n            const randomSquare = availableSquaresArray[randomIndex].id;\n            dispatch({\n              type: actionsTypes.SET_SQUARE_BLUE,\n              payload: randomSquare,\n            });\n          }\n        }\n      };\n      interval = setInterval(gameInterval, delay);\n    }\n    return () => {\n      clearTimeout(interval);\n    };\n  }, [isGameStart, isGameFinish, size, dispatch, user, delay, field]);\n\n  \n  useEffect(() => {\n    if (isGameFinish) {\n      let date = dateFormat();\n      setWinner(winner, date).then((res) =>\n        dispatch({\n          type: actionsTypes.SET_WINNERS,\n          payload: res.data.reverse(),\n        })\n      );\n    }\n  }, [isGameFinish, dispatch, winner]);\n\n  return (\n    <>\n      <Grid item xs={12} sm={6} lg={4}>\n        <FormControl variant=\"filled\" className={classes.formControl}>\n          <InputLabel classes={{ root: classes.label }} id=\"select-mode-label\">\n            Pick game mode\n          </InputLabel>\n          <Select\n            input={<FilledInput classes={{ input: classes.input }} />}\n            labelId=\"select-mode-label\"\n            id=\"select-mode\"\n            value={mode}\n            label=\"Pick game mode\"\n            disabled={isGameStart}\n            onChange={(e) => setMode(e.target.value)}\n          >\n            {state.settings &&\n              Object.keys(state.settings).map((set, i) => (\n                <MenuItem key={set} value={set}>\n                  {set}\n                </MenuItem>\n              ))}\n          </Select>\n        </FormControl>\n      </Grid>\n      <Grid xs={12} sm={6} item lg={4}>\n        <FormControl className={classes.formControl}>\n          <TextField\n            error={user.length >= 10 ? true : false}\n            size=\"small\"\n            label=\"Enter your name\"\n            variant=\"filled\"\n            onChange={(e) => setUserName(e.target.value)}\n            disabled={isGameStart}\n            value={user}\n            helperText=\"Max 10 length\"\n          />\n        </FormControl>\n      </Grid>\n      <Grid xs={12} sm={6} md={12} item justify=\"center\" container lg={4}>\n        <Button\n          onClick={() => dispatch({ type: actionsTypes.START_GAME })}\n          classes={{\n            root: classes.button,\n            disabled: classes.buttonDisabled,\n            contained: classes.buttonDisabled,\n          }}\n          color=\"primary\"\n          className={classes.button}\n          disabled={!mode || !user || isGameStart || user.length >= 10}\n        >\n          {isGameFinish ? \"Play again\" : \"Play\"}\n        </Button>\n      </Grid>\n      <Grid item xs={12}>\n        {winner && <h3 style={{ textAlign: \"center\" }}> {winner} win! </h3>}\n      </Grid>\n    </>\n  );\n}\n\nexport default SettingMode;\n"," export function dateFormat (){\n    const date = new Date()\n    let options = {\n      month: 'long',\n      year: 'numeric',\n    };\n    let formatDate =date.toLocaleDateString(\"en-US\", options);\n    let customDate =`${date.getHours()}:${(date.getMinutes()<10?'0':'') + date.getMinutes()}; ${(\"0\" + date.getDate()).slice(-2)} ${formatDate}`\n    return customDate\n}","import React from \"react\";\nimport './Loader.scss'\n\n\nlet array = new Array(10).fill(\"element\");\nexport default function Loder() {\n\n  return (\n    <div className=\"loader\">\n       {array && array.map((el,i)=>{\n         return <span key={i} className=\"loader-block\"></span>\n       })}\n   \n    </div>\n  );\n}\n\n\n","import React, { useState, useEffect, useContext, useMemo } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Grid, Container } from \"@material-ui/core\";\nimport axios from \"axios\";\n//api\nimport { getSettings, getWinners } from \"./api/api\";\n//state\nimport { GameContext } from \"./state/reducer\";\nimport { actionsTypes } from \"./state/actionsTypes\";\n//components\nimport GameField from \"./components/GameField/GameField\";\nimport LeaderBoard from \"./components/LeaderBoard/LeaderBoard\";\nimport SettingMode from \"./components/SettingMode/SettingMode\";\nimport Loader from \"./components/Loader/Loader\";\n\nconst useStyles = makeStyles((theme) => ({\n  mainGrid: {\n    padding: theme.spacing(1),\n    border: \"2px solid #E7E7E9\",\n    minHeight: \"100vh\",\n    paddingTop: \"10%\",\n    [theme.breakpoints.up(\"md\")]: {\n      padding: theme.spacing(6),\n    },\n  },\n \n}));\n\nfunction Game() {\n  const classes = useStyles();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const { state, dispatch } = useContext(GameContext);\n  const { winners } = state;\n\n  useEffect(() => {\n    setIsError(false);\n    setIsLoading(true);\n    axios\n      .all([getSettings(), getWinners()])\n      .then(\n        axios.spread((...responses) => {\n          const [settings, winners] = responses;\n          dispatch({ type: actionsTypes.SET_SETTINGS, payload: settings.data });\n          dispatch({ type: actionsTypes.SET_WINNERS, payload: winners.data.reverse() });\n        })\n      )\n      .catch((errors) => {\n        setIsError(true);\n      })\n      .finally(() => setIsLoading(false));\n  }, [dispatch]);\n\n  // LeaderBoardMemo should rerender only when winners list change\n  const LeaderBoardMemo = useMemo(() => {\n    return <LeaderBoard winners={winners} />;\n  }, [winners]);\n\n  return (\n    <Container maxWidth=\"xl\">\n   \n      <main>\n        {isError ? \"Something go wrong\" : null}\n        {isLoading ? (\n          <Loader />\n        ) : (\n          <Grid\n            className={classes.mainGrid}\n            container\n            direction=\"row\"\n            alignItems=\"flex-start\"\n            spacing={2}\n          >\n            <Grid\n             justify=\"center\"\n              container\n              item\n              spacing={2}\n              alignItems=\"flex-start\"\n              md={6}\n            >\n              <SettingMode />\n              <GameField />\n            </Grid>\n            <Grid container alignItems=\"center\" item md={6}>\n              {LeaderBoardMemo}\n            </Grid>\n          </Grid>\n        )}\n      </main>\n    </Container>\n  );\n}\n\nexport default Game;\n","import React, { useContext, useReducer } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\n\n//context/reducer\nimport { GameContext } from \"./state/reducer\";\nimport reducer from \"./state/reducer\";\n//component\nimport Game from \"./Game\";\n\nconst App = () => {\n  const initialState = useContext(GameContext);\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <GameContext.Provider value={{ state, dispatch }}>\n      <Game />\n    </GameContext.Provider>\n  );\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}