{"version":3,"sources":["state/actionsTypes.js","state/reducer.js","api/api.jsx","components/GameField/Cell.jsx","components/GameField/GameField.jsx","components/LeaderBoard/LeaderList.jsx","components/LeaderBoard/LeaderBoard.jsx","components/SettingMode/SettingMode.jsx","utils/dateFormat.js","components/Loader/Loader.jsx","Game.js","index.js"],"names":["actionsTypes","SET_WINNERS","SET_SETTINGS","SET_USERNAME","SET_DELAY","SET_FIELD_SIZE","SET_FIELD_ARRAY","START_GAME","FINISH_GAME","SET_GAME_PERMISSION","CLICK_SQUARE","GameContext","React","createContext","settings","field","delay","size","isGameStart","isGameFinish","winners","winner","reducer","state","action","type","payload","SET_GAME_DELAY","isBlueSquare","map","square","index","isGreenSquare","disabled","Error","instance","axios","create","baseURL","Cell","isRedSquare","onClick","btnClass","cn","btn","className","useStyles","makeStyles","theme","center","margin","GameField","useContext","dispatch","classes","handleCkickSquare","useCallback","board","val","Fragment","key","id","Grid","item","LeaderList","date","LeaderBoard","i","formControl","width","input","padding","minWidth","textAlign","label","transform","button","color","backgroundColor","cyan","breakpoints","down","buttonDisabled","createField","fieldSize","fieldArr","isAvailable","isDisabled","push","SettingMode","useState","mode","setMode","user","setUserName","useEffect","fieldArray","interval","setInterval","gameInterval","fieldCopy","blueSquareArray","filter","greenSquareArray","redSquareArray","availableSquaresArray","length","currentSquare","Math","round","clearInterval","randomSquare","floor","random","clearTimeout","Date","formatDate","toLocaleDateString","month","year","getHours","getMinutes","getDate","slice","dateFormat","post","setWinner","then","res","data","xs","sm","lg","FormControl","variant","InputLabel","root","Select","FilledInput","labelId","value","onChange","e","target","Object","keys","set","MenuItem","TextField","md","justify","container","Button","contained","style","array","Array","fill","Loder","class","el","mainGrid","spacing","border","minHeight","paddingTop","up","Game","isLoading","setIsLoading","isError","setIsError","all","get","spread","responses","reverse","catch","errors","finally","LeaderBoardMemo","useMemo","Container","maxWidth","console","log","direction","alignItems","App","initialState","useReducer","Provider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fd9bcdd1.chunk.js","sourcesContent":["\n\nexport const actionsTypes = {\n    SET_WINNERS: \"SET_WINNERS\", \n    SET_SETTINGS: \"SET_SETTINGS\",\n    SET_USERNAME:\"SER_USERNAME\",\n    SET_DELAY:\"SET_DELAY\",\n    SET_FIELD_SIZE:\"SET_FIELD_SIZE\",\n    SET_FIELD_ARRAY:\"SET_FIELD_ARRAY\",\n    START_GAME:\"START_GAME\",\n    FINISH_GAME:\"FINISH_GAME\",\n    SET_GAME_PERMISSION:\"SET_GAME_PERMISSION\",\n    CLICK_SQUARE:\"CLICK_SQUARE\"\n}","import React from \"react\";\nimport { actionsTypes } from \"./actionsTypes\";\n\nexport const GameContext = React.createContext({\n  settings: null,\n  field: [],\n  delay: null,\n  size: null,\n  isGameStart: false,\n  isGameFinish: false,\n  winners: null,\n  winner: \"\",\n});\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case actionsTypes.SET_SETTINGS: {\n      return { ...state, settings: action.payload };\n    }\n    case actionsTypes.SET_GAME_DELAY: {\n      return { ...state, delay: action.payload };\n    }\n    case actionsTypes.SET_FIELD_SIZE: {\n      return { ...state, size: action.payload };\n    }\n    case actionsTypes.SET_WINNERS: {\n      return { ...state, winners: action.payload };\n    }\n    case actionsTypes.SET_FIELD_ARRAY: {\n      return { ...state, field: action.payload };\n    }\n    case actionsTypes.START_GAME: {\n      return { ...state, isGameStart: true };\n    }\n    case actionsTypes.FINISH_GAME: {\n      return {\n        ...state,\n        isGameFinish: true,\n        isGameStart: false,\n        winner: action.payload,\n      };\n    }\n    case actionsTypes.SET_GAME_PERMISSION: {\n      return {\n        ...state,\n        isGameFinish: false,\n        winner: \"\",\n      };\n    }\n    case actionsTypes.CLICK_SQUARE: {\n      if (state.field[action.payload].isBlueSquare){\n        return {\n          ...state,\n          field: state.field.map((square, index) =>\n            index === action.payload\n              ? \n                {\n                  ...square,\n                  isBlueSquare: false,\n                  isGreenSquare: true,\n                  disabled: true,\n                }\n              : \n                square\n          ),\n        };\n        \n      }\n      else {return state}\n  \n    }\n    default: {\n      throw new Error();\n    }\n  }\n}\nexport default reducer;\n","import axios from'axios'\n\n\nconst instance = axios.create({\n  baseURL: \"https://starnavi-frontend-test-task.herokuapp.com/\",\n});\n\nexport function getSettings() {\n  return instance.get(`/game-settings`);\n}\nexport function getWinners() {\n  return instance.get(\"/winners\");\n}\nexport function setWinner(winner, date) {\n  return instance.post(`/winners`, {winner, date});\n}\n\nexport default instance","import React from \"react\";\nimport './Cell.scss'\nimport cn from \"classnames\";\nimport PropTypes from 'prop-types'\n\nconst Cell = ({ isGreenSquare, isRedSquare, isBlueSquare, onClick, size }) => {\n  \n  let btnClass = cn({\n     btn: true,\n    \"btn-blue\": isBlueSquare,\n    \"btn-red\": isRedSquare,\n    \"btn-green\": isGreenSquare,\n    \"btn-small\": size === 5,\n    \"btn-medium\":size===10,\n    \"btn-large\":size===15\n  });\n\n  return <button onClick={onClick} className={btnClass}></button>;\n};\n\nCell.propTypes = {\n  isGreenSquare: PropTypes.bool,\n  isRedSquare : PropTypes.bool, \n  isBlueSquare : PropTypes.bool,\n  onClick: PropTypes.func,\n  size:PropTypes.number\n};\n\nexport default Cell;\n","import React, { useContext, useCallback } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n//state\nimport { GameContext } from \"../../state/reducer\";\nimport { actionsTypes } from \"../../state/actionsTypes\";\n//components\nimport Cell from \"./Cell\";\n\n\nconst useStyles = makeStyles((theme) => ({\ncenter: {\n    margin: \"0 auto\",\n  },\n}));\n\nfunction GameField() {\n  const { state, dispatch } = useContext(GameContext);\n  const { size, field } = state;\n  const classes = useStyles();\n  const handleCkickSquare = useCallback(\n    (index) => {\n      dispatch({ type: actionsTypes.CLICK_SQUARE, payload: index });\n    },\n    [dispatch]\n  );\n\n  const board = field.map((val, index) => {\n    if ((index + 1) % size === 0) {\n      return (\n        <React.Fragment key={val.id}>\n          <Cell\n            key={val.id}\n            {...val}\n            size={size}\n            onClick={() => handleCkickSquare(index)}\n          />\n          <p />\n        </React.Fragment>\n      );\n    } else {\n      return (\n        <Cell\n          size={size}\n          key={val.id}\n          {...val}\n          onClick={() => handleCkickSquare(index)}\n        />\n      );\n    }\n  });\n\n  return (\n    <Grid   classes={{item: classes.center}} item>\n      <div >{board}</div>\n    </Grid>\n  );\n}\n\nexport default GameField;\n","import React from \"react\";\nimport PropTypes from 'prop-types'\n\nfunction LeaderList({ winner }) {\n  return (\n    <div className=\"leaders_item\">\n      <div className=\"leaders_item-row\">\n        <p> {winner.winner}</p>\n        <p>{winner.date}</p>\n      </div>\n    </div>\n  );\n}\n\n\nLeaderList.propTypes = {\n  winners: PropTypes.string\n};\n\nexport default LeaderList \n\n","import React from \"react\";\nimport \"./LeaderBoard.scss\";\nimport LeaderList from \"./LeaderList\";\nimport PropTypes from 'prop-types'\n\n\nconst LeaderBoard = ({ winners }) => {\n\n \n  return (\n    <div className=\"leaders\">\n      <h1 className=\"leaders_title\">Leader Board</h1>\n      {winners &&\n        winners.map((winner, i) => {\n            return <LeaderList key={winner.id} winner={winner} />;\n        })}\n    </div>\n  );\n};\n\nLeaderBoard.propTypes = {\n    winners: PropTypes.arrayOf(PropTypes.object)\n};\n\nexport default LeaderBoard;\n\n","import React, { useState, useEffect, useContext } from \"react\";\nimport {\n  Grid,\n  InputLabel,\n  Select,\n  MenuItem,\n  TextField,\n  Button,\n  FormControl,\n  FilledInput,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport cyan from \"@material-ui/core/colors/cyan\";\n//api\nimport { setWinner } from \"../../api/api\";\n//state\nimport { GameContext } from \"../../state/reducer\";\nimport { actionsTypes } from \"../../state/actionsTypes\";\n//utils\nimport { dateFormat } from \"../../utils/dateFormat\";\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    width: \"100%\",\n  },\n  input: {\n    padding: \"23px 12px 6px\",\n    minWidth: \"145px\",\n    textAlign: \"left\",\n  },\n  label: {\n    transform: \"translate(12px, 18px) scale(1)\",\n  },\n  button: {\n    padding: \"12px 50px\",\n    color: \"#fff\",\n    backgroundColor: cyan[800],\n    \"&:hover\": {\n      backgroundColor: cyan[900],\n    },\n    [theme.breakpoints.down(\"md\")]: {\n      width: \"100%\",\n    },\n  },\n  buttonDisabled: {\n    backgroundColor: \"#7B8D93 !important\",\n    color: \"#fff !important\",\n  },\n}));\n\nconst createField = (fieldSize) => {\n  let fieldArr = [];\n  for (let i = 0; i < fieldSize * fieldSize; i++) {\n    let square = {\n      id: i,\n      isGreenSquare: false,\n      isRedSquare: false,\n      isBlueSquare: false,\n      isAvailable: true,\n      isDisabled: false,\n    };\n    fieldArr.push(square);\n  }\n\n  return fieldArr;\n};\n\nfunction SettingMode() {\n  const classes = useStyles();\n  const { state, dispatch } = useContext(GameContext);\n  const [mode, setMode] = useState(\"\");\n  const [user, setUserName] = useState(\"\");\n\n  const {\n    settings,\n    isGameStart,\n    size,\n    field,\n    delay,\n    isGameFinish,\n    winner,\n  } = state;\n\n  useEffect(() => {\n    if (mode) {\n      dispatch({\n        type: actionsTypes.SET_FIELD_SIZE,\n        payload: settings[mode].field,\n      });\n      dispatch({\n        type: actionsTypes.SET_GAME_DELAY,\n        payload: settings[mode].delay,\n      });\n      dispatch({ type: actionsTypes.SET_GAME_PERMISSION });\n    }\n  }, [mode, dispatch, settings]);\n\n  useEffect(() => {\n    if (size) {\n      let fieldArray = createField(size);\n      dispatch({ type: actionsTypes.SET_FIELD_ARRAY, payload: fieldArray });\n    }\n  }, [size, dispatch]);\n\n  useEffect(() => {\n    if (isGameStart && isGameFinish) {\n      let fieldArray = createField(size);\n      dispatch({ type: actionsTypes.SET_FIELD_ARRAY, payload: fieldArray });\n      dispatch({ type: actionsTypes.SET_GAME_PERMISSION, payload: \"\" });\n    }\n  }, [isGameStart, size, isGameFinish, dispatch]);\n\n  useEffect(() => {\n    let interval;\n    if (isGameStart && !isGameFinish) {\n      let gameInterval = () => {\n        let fieldCopy = [...field];\n        let blueSquareArray = fieldCopy.filter((square) => {\n          return square.isBlueSquare;\n        });\n        let greenSquareArray = fieldCopy.filter(\n          (square) => square.isGreenSquare\n        );\n        let redSquareArray = fieldCopy.filter((square) => square.isRedSquare);\n        let availableSquaresArray = fieldCopy.filter(\n          (square) => square.isAvailable\n        );\n\n        if (blueSquareArray.length) {\n          let currentSquare = blueSquareArray[0];\n          fieldCopy[currentSquare.id].isBlueSquare = false;\n          fieldCopy[currentSquare.id].isRedSquare = true;\n          fieldCopy[currentSquare.id].isDisabled = true;\n        }\n        if (greenSquareArray.length === Math.round((size * size) / 2)) {\n          clearInterval(gameInterval);\n          dispatch({ type: actionsTypes.FINISH_GAME, payload: user });\n        } else if (redSquareArray.length === Math.round((size * size) / 2)) {\n          clearInterval(gameInterval);\n          dispatch({ type: actionsTypes.FINISH_GAME, payload: \"Computer\" });\n        } else {\n          if (availableSquaresArray.length) {\n            const randomIndex = Math.floor(\n              Math.random() * availableSquaresArray.length\n            );\n            const randomSquare = availableSquaresArray[randomIndex];\n            fieldCopy[randomSquare.id].isBlueSquare = true;\n            fieldCopy[randomSquare.id].isRedSquare = false;\n            fieldCopy[randomSquare.id].isAvailable = false;\n          }\n\n          dispatch({ type: actionsTypes.SET_FIELD_ARRAY, payload: fieldCopy });\n        }\n      };\n\n      interval = setInterval(gameInterval, delay);\n    }\n    return () => {\n      clearTimeout(interval);\n    };\n  }, [isGameStart, isGameFinish, size, dispatch, user, delay, field]);\n\n  useEffect(() => {\n    if (isGameFinish) {\n      let date = dateFormat();\n      setWinner(winner, date).then((res) =>\n        dispatch({ type: actionsTypes.SET_WINNERS, payload: res.data })\n      );\n    }\n  }, [isGameFinish, dispatch, winner]);\n\n  return (\n    <>\n      <Grid item xs={12} sm={6}  lg={4}>\n        <FormControl variant=\"filled\" className={classes.formControl}>\n          <InputLabel classes={{ root: classes.label }} id=\"select-mode-label\">\n            Pick game mode\n          </InputLabel>\n          <Select\n            input={<FilledInput classes={{ input: classes.input }} />}\n            labelId=\"select-mode-label\"\n            id=\"select-mode\"\n            value={mode}\n            label=\"Pick game mode\"\n            disabled={isGameStart}\n            onChange={(e) => setMode(e.target.value)}\n          >\n            {state.settings &&\n              Object.keys(state.settings).map((set, i) => (\n                <MenuItem key={set} value={set}>\n                  {set}\n                </MenuItem>\n              ))}\n          </Select>\n        </FormControl>\n      </Grid>\n      <Grid xs={12} sm={6}  item lg={4}>\n        <FormControl className={classes.formControl}>\n          <TextField\n            size=\"small\"\n            label=\"Enter your name\"\n            variant=\"filled\"\n            onChange={(e) => setUserName(e.target.value)}\n            disabled={isGameStart}\n            value={user}\n          />\n        </FormControl>\n      </Grid>\n      <Grid xs={12} sm={6} md={12} item justify=\"center\" container lg={4}>\n        <Button\n          \n          onClick={() => dispatch({ type: actionsTypes.START_GAME })}\n          classes={{\n            root: classes.button,\n            disabled: classes.buttonDisabled,\n            contained: classes.buttonDisabled,\n          }}\n          color=\"primary\"\n          className={classes.button}\n          disabled={!mode || !user || isGameStart}\n        >\n          {isGameFinish ? \"Play again\" : \"Play\"}\n        </Button>\n      </Grid>\n      <Grid item xs={12}>\n        {winner && <h3 style={{ textAlign: \"center\" }}> {winner} win! </h3>}\n      </Grid>\n    </>\n  );\n}\n\nexport default SettingMode;\n"," export function dateFormat (){\n    const date = new Date()\n    let options = {\n      month: 'long',\n      year: 'numeric',\n    };\n    let formatDate =date.toLocaleDateString(\"en-US\", options);\n    let customDate =`${date.getHours()}:${ date.getMinutes()}; ${(\"0\" + date.getDate()).slice(-2)} ${formatDate}`\n    return customDate\n}","import React from \"react\";\nimport './Loader.scss'\n\n\nlet array = new Array(10).fill(\"element\");\nexport default function Loder() {\n\n  return (\n    <div class=\"loader\">\n       {array && array.map((el,i)=>{\n         return <span key={i} className=\"loader-block\"></span>\n       })}\n   \n    </div>\n  );\n}\n\n\n","import React, { useState, useEffect, useContext, useMemo } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Grid, Container } from \"@material-ui/core\";\nimport axios from \"axios\";\n//api\nimport { getSettings, getWinners } from \"./api/api\";\n//state\nimport { GameContext } from \"./state/reducer\";\nimport { actionsTypes } from \"./state/actionsTypes\";\n//components\nimport GameField from \"./components/GameField/GameField\";\nimport LeaderBoard from \"./components/LeaderBoard/LeaderBoard\";\nimport SettingMode from \"./components/SettingMode/SettingMode\";\nimport Loader from \"./components/Loader/Loader\";\n\nconst useStyles = makeStyles((theme) => ({\n  mainGrid: {\n    padding: theme.spacing(1),\n    border: \"2px solid #E7E7E9\",\n    minHeight: \"100vh\",\n    paddingTop: \"10%\",\n    [theme.breakpoints.up(\"md\")]: {\n      padding: theme.spacing(6),\n    },\n  },\n \n}));\n\nfunction Game() {\n  const classes = useStyles();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const { state, dispatch } = useContext(GameContext);\n  const { winners } = state;\n\n  useEffect(() => {\n    setIsError(false);\n    setIsLoading(true);\n    axios\n      .all([getSettings(), getWinners()])\n      .then(\n        axios.spread((...responses) => {\n          const [settings, winners] = responses;\n          dispatch({ type: actionsTypes.SET_SETTINGS, payload: settings.data });\n          dispatch({ type: actionsTypes.SET_WINNERS, payload: winners.data.reverse() });\n        })\n      )\n      .catch((errors) => {\n        setIsError(true);\n      })\n      .finally(() => setIsLoading(false));\n  }, [dispatch]);\n\n  // LeaderBoardMemo should rerender only when winners list change\n  const LeaderBoardMemo = useMemo(() => {\n    return <LeaderBoard winners={winners} />;\n  }, [winners]);\n\n  return (\n    <Container maxWidth=\"xl\">\n      {console.log(state)}\n      <main>\n        {isError ? \"Something go wrong\" : null}\n        {isLoading ? (\n          <Loader />\n        ) : (\n          <Grid\n            className={classes.mainGrid}\n            container\n            direction=\"row\"\n            alignItems=\"flex-start\"\n            spacing={2}\n          >\n            <Grid\n             justify=\"center\"\n              container\n              item\n              spacing={2}\n              alignItems=\"flex-start\"\n              md={6}\n            >\n              <SettingMode />\n              <GameField />\n            </Grid>\n            <Grid container alignItems=\"center\" item md={6}>\n              {LeaderBoardMemo}\n            </Grid>\n          </Grid>\n        )}\n      </main>\n    </Container>\n  );\n}\n\nexport default Game;\n","import React, { useContext, useReducer } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\n\n//context/reducer\nimport { GameContext } from \"./state/reducer\";\nimport reducer from \"./state/reducer\";\n//component\nimport Game from \"./Game\";\n\nconst App = () => {\n  const initialState = useContext(GameContext);\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <GameContext.Provider value={{ state, dispatch }}>\n      <Game />\n    </GameContext.Provider>\n  );\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}