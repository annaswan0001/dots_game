{"version":3,"sources":["state/actionsTypes.js","state/reducer.js","api/api.jsx","components/GameField/Cell.jsx","components/GameField/GameField.jsx","components/LeaderBoard/LeaderList.jsx","components/LeaderBoard/LeaderBoard.jsx","components/SettingMode/SettingMode.jsx","utils/dateFormat.js","components/Loader/Loader.jsx","Game.js","index.js"],"names":["actionsTypes","SET_WINNERS","SET_SETTINGS","SET_USERNAME","SET_DELAY","SET_FIELD_SIZE","SET_FIELD_ARRAY","START_GAME","FINISH_GAME","SET_GAME_PERMISSION","CLICK_SQUARE","GameContext","React","createContext","settings","field","delay","size","isGameStart","isGameFinish","winners","winner","reducer","state","action","type","payload","SET_GAME_DELAY","isGamePermission","isBlueSquare","map","square","index","isGreenSquare","disabled","Error","instance","axios","create","baseURL","Cell","isRedSquare","onClick","btnClass","cn","btn","className","GameField","useContext","dispatch","handleCkickSquare","useCallback","board","val","Fragment","key","id","Grid","item","LeaderList","date","LeaderBoard","i","useStyles","makeStyles","theme","formControl","width","input","padding","minWidth","textAlign","label","transform","button","color","backgroundColor","cyan","buttonDisabled","createField","fieldSize","fieldArr","isAvailable","isDisabled","push","SettingMode","classes","useState","mode","setMode","user","setUserName","useEffect","fieldArray","interval","setInterval","gameInterval","fieldCopy","blueSquareArray","filter","greenSquareArray","redSquareArray","availableSquaresArray","length","currentSquare","Math","round","clearInterval","randomSquare","floor","random","clearTimeout","Date","formatDate","toLocaleDateString","month","year","getHours","getMinutes","getDate","slice","dateFormat","post","setWinner","then","res","data","lg","FormControl","variant","InputLabel","root","Select","FilledInput","labelId","value","onChange","e","target","Object","keys","set","MenuItem","TextField","container","Button","contained","xs","style","array","Array","fill","Loder","class","el","mainGrid","spacing","border","minHeight","paddingTop","Game","isLoading","setIsLoading","isError","setIsError","all","get","spread","responses","catch","errors","finally","LeaderBoardMemo","useMemo","Container","maxWidth","direction","alignItems","sm","App","initialState","useReducer","Provider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.15d48d97.chunk.js","sourcesContent":["\n\nexport const actionsTypes = {\n    SET_WINNERS: \"SET_WINNERS\", \n    SET_SETTINGS: \"SET_SETTINGS\",\n    SET_USERNAME:\"SER_USERNAME\",\n    SET_DELAY:\"SET_DELAY\",\n    SET_FIELD_SIZE:\"SET_FIELD_SIZE\",\n    SET_FIELD_ARRAY:\"SET_FIELD_ARRAY\",\n    START_GAME:\"START_GAME\",\n    FINISH_GAME:\"FINISH_GAME\",\n    SET_GAME_PERMISSION:\"SET_GAME_PERMISSION\",\n    CLICK_SQUARE:\"CLICK_SQUARE\"\n}","import React from \"react\";\nimport { actionsTypes } from \"./actionsTypes\";\n\nexport const GameContext = React.createContext({\n  settings: null,\n  field: [],\n  delay: null,\n  size: null,\n  isGameStart: false,\n  isGameFinish: false,\n  winners: null,\n  winner: \"\",\n});\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case actionsTypes.SET_SETTINGS: {\n      return { ...state, settings: action.payload };\n    }\n    case actionsTypes.SET_GAME_DELAY: {\n      return { ...state, delay: action.payload };\n    }\n    case actionsTypes.SET_FIELD_SIZE: {\n      return { ...state, size: action.payload };\n    }\n    case actionsTypes.SET_WINNERS: {\n      return { ...state, winners: action.payload };\n    }\n    case actionsTypes.SET_FIELD_ARRAY: {\n      return { ...state, field: action.payload };\n    }\n    case actionsTypes.START_GAME: {\n      return { ...state, isGameStart: true };\n    }\n    case actionsTypes.FINISH_GAME: {\n      return {\n        ...state,\n        isGameFinish: true,\n        isGameStart: false,\n        isGamePermission: false,\n        winner: action.payload,\n      };\n    }\n    case actionsTypes.SET_GAME_PERMISSION: {\n      return {\n        ...state,\n        isGamePermission: true,\n        isGameFinish: false,\n        winner: \"\",\n      };\n    }\n    case actionsTypes.CLICK_SQUARE: {\n      if (state.field[action.payload].isBlueSquare){\n        return {\n          ...state,\n          field: state.field.map((square, index) =>\n            index === action.payload\n              ? \n                {\n                  ...square,\n                  isBlueSquare: false,\n                  isGreenSquare: true,\n                  disabled: true,\n                }\n              : \n                square\n          ),\n        };\n        \n      }\n      else {return state}\n  \n    }\n    default: {\n      throw new Error();\n    }\n  }\n}\nexport default reducer;\n","import axios from'axios'\n\n\nconst instance = axios.create({\n  baseURL: \"https://starnavi-frontend-test-task.herokuapp.com/\",\n});\n\nexport function getSettings() {\n  return instance.get(`/game-settings`);\n}\nexport function getWinners() {\n  return instance.get(\"/winners\");\n}\nexport function setWinner(winner, date) {\n  return instance.post(`/winners`, {winner, date});\n}\n\nexport default instance","import React from \"react\";\nimport './Cell.scss'\nimport cn from \"classnames\";\nimport PropTypes from 'prop-types'\n\nconst Cell = ({ isGreenSquare, isRedSquare, isBlueSquare, onClick, size }) => {\n  \n  let btnClass = cn({\n     btn: true,\n    \"btn-blue\": isBlueSquare,\n    \"btn-red\": isRedSquare,\n    \"btn-green\": isGreenSquare,\n    \"btn-small\": size === 5,\n    \"btn-medium\":size===10,\n    \"btn-large\":size===15\n  });\n\n  return <button onClick={onClick} className={btnClass}></button>;\n};\n\nCell.propTypes = {\n  isGreenSquare: PropTypes.bool,\n  isRedSquare : PropTypes.bool, \n  isBlueSquare : PropTypes.bool,\n  onClick: PropTypes.func,\n  size:PropTypes.number\n};\n\nexport default Cell;\n","import React, { useContext, useCallback } from \"react\";\nimport { Grid } from \"@material-ui/core\";\n//state\nimport { GameContext } from \"../../state/reducer\";\nimport { actionsTypes } from \"../../state/actionsTypes\";\n//components\nimport Cell from \"./Cell\";\n\nfunction GameField() {\n  const { state, dispatch } = useContext(GameContext);\n  const { size, field } = state;\n\n  const handleCkickSquare = useCallback(\n    (index) => {\n      dispatch({ type: actionsTypes.CLICK_SQUARE, payload: index });\n    },\n    [dispatch]\n  );\n\n  const board = field.map((val, index) => {\n    if ((index + 1) % size === 0) {\n      return (\n        <React.Fragment key={val.id}>\n          <Cell\n            key={val.id}\n            {...val}\n            size={size}\n            onClick={() => handleCkickSquare(index)}\n          />\n          <p />\n        </React.Fragment>\n      );\n    } else {\n      return (\n        <Cell\n          size={size}\n          key={val.id}\n          {...val}\n          onClick={() => handleCkickSquare(index)}\n        />\n      );\n    }\n  });\n\n  return (\n    <Grid item>\n      <div>{board}</div>\n    </Grid>\n  );\n}\n\nexport default GameField;\n","import React from \"react\";\nimport PropTypes from 'prop-types'\n\nfunction LeaderList({ winner }) {\n  return (\n    <div className=\"leaders_item\">\n      <div className=\"leaders_item-row\">\n        <p> {winner.winner}</p>\n        <p>{winner.date}</p>\n      </div>\n    </div>\n  );\n}\n\n\nLeaderList.propTypes = {\n  winners: PropTypes.string\n};\n\nexport default LeaderList \n\n","import React from \"react\";\nimport \"./LeaderBoard.scss\";\nimport LeaderList from \"./LeaderList\";\nimport PropTypes from 'prop-types'\n\n\nconst LeaderBoard = ({ winners }) => {\n  return (\n    <div className=\"leaders\">\n      <h1 className=\"leaders_title\">Leader Board</h1>\n      {winners &&\n        winners.map((winner, i) => {\n            return <LeaderList key={winner.id} winner={winner} />;\n        })}\n    </div>\n  );\n};\n\nLeaderBoard.propTypes = {\n    winners: PropTypes.arrayOf(PropTypes.object)\n};\n\nexport default LeaderBoard;\n\n","import React, { useState, useEffect, useContext } from \"react\";\nimport {\n  Grid,\n  InputLabel,\n  Select,\n  MenuItem,\n  TextField,\n  Button,\n  FormControl,\n  FilledInput,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport cyan from \"@material-ui/core/colors/cyan\";\n//api\nimport { setWinner } from \"../../api/api\";\n//state\nimport { GameContext } from \"../../state/reducer\";\nimport { actionsTypes } from \"../../state/actionsTypes\";\n//utils\nimport { dateFormat } from \"../../utils/dateFormat\";\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    width: \"100%\",\n  },\n  input: {\n    padding: \"23px 12px 6px\",\n    minWidth: \"145px\",\n    textAlign: \"left\"\n  },\n  label: {\n    transform: \"translate(12px, 18px) scale(1)\",\n  },\n  button: {\n    padding: \"12px 50px\",\n    color: \"#fff\",\n    backgroundColor: cyan[800],\n    \"&:hover\": {\n      backgroundColor: cyan[900],\n    },\n  },\n  buttonDisabled: {\n    backgroundColor: \"#7B8D93 !important\",\n    color: \"#fff !important\",\n  },\n}));\n\n\nconst createField = (fieldSize) => {\n  let fieldArr = [];\n  for (let i = 0; i < fieldSize * fieldSize; i++) {\n    let square = {\n      id: i,\n      isGreenSquare: false,\n      isRedSquare: false,\n      isBlueSquare: false,\n      isAvailable: true,\n      isDisabled: false,\n    };\n    fieldArr.push(square);\n  }\n\n  return fieldArr;\n};\n\nfunction SettingMode() {\n  const classes = useStyles();\n  const { state, dispatch } = useContext(GameContext);\n  const [mode, setMode] = useState(\"\");\n  const [user, setUserName] = useState(\"\");\n\n  const {\n    settings,\n    isGameStart,\n    size,\n    field,\n    delay,\n    isGameFinish,\n    winner,\n  } = state;\n\n  useEffect(() => {\n    if (mode) {\n      dispatch({type: actionsTypes.SET_FIELD_SIZE, payload: settings[mode].field})\n      dispatch({type: actionsTypes.SET_GAME_DELAY, payload: settings[mode].delay})\n      dispatch({ type: actionsTypes.SET_GAME_PERMISSION });\n    }\n  }, [mode, dispatch, settings]);\n\n  useEffect(() => {\n    if (size) {\n      let fieldArray = createField(size)\n      dispatch({ type: actionsTypes.SET_FIELD_ARRAY, payload: fieldArray });\n    }\n  }, [size, dispatch]);\n\n  useEffect(() => {\n    if (isGameStart && isGameFinish) {\n      let fieldArray = createField(size);\n      dispatch({ type: actionsTypes.SET_FIELD_ARRAY, payload: fieldArray });\n      dispatch({ type: actionsTypes.SET_GAME_PERMISSION, payload: \"\" });\n    }\n  }, [isGameStart, size, isGameFinish, dispatch]);\n\n  useEffect(() => {\n    let interval;\n    if (isGameStart && !isGameFinish) {\n      let gameInterval = () => {\n        let fieldCopy = [...field];\n        let blueSquareArray = fieldCopy.filter((square) => {\n          return square.isBlueSquare;\n        });\n        let greenSquareArray = fieldCopy.filter(\n          (square) => square.isGreenSquare\n        );\n        let redSquareArray = fieldCopy.filter((square) => square.isRedSquare);\n        let availableSquaresArray = fieldCopy.filter(\n          (square) => square.isAvailable\n        );\n\n        if (blueSquareArray.length) {\n          let currentSquare = blueSquareArray[0];\n          fieldCopy[currentSquare.id].isBlueSquare = false;\n          fieldCopy[currentSquare.id].isRedSquare = true;\n          fieldCopy[currentSquare.id].isDisabled = true;\n        }\n        if (greenSquareArray.length === Math.round((size * size) / 2)) {\n          clearInterval(gameInterval);\n          dispatch({ type: actionsTypes.FINISH_GAME, payload: user });\n        } else if (redSquareArray.length === Math.round((size * size) / 2)) {\n          clearInterval(gameInterval);\n          dispatch({ type: actionsTypes.FINISH_GAME, payload: \"Computer\" });\n        } else {\n          if (availableSquaresArray.length) {\n            const randomIndex = Math.floor(\n              Math.random() * availableSquaresArray.length\n            );\n            const randomSquare = availableSquaresArray[randomIndex];\n            fieldCopy[randomSquare.id].isBlueSquare = true;\n            fieldCopy[randomSquare.id].isRedSquare = false;\n            fieldCopy[randomSquare.id].isAvailable = false;\n          }\n\n          dispatch({ type: actionsTypes.SET_FIELD_ARRAY, payload: fieldCopy });\n        }\n      };\n\n      interval = setInterval(gameInterval, delay);\n    }\n    return () => {\n      clearTimeout(interval);\n    };\n  }, [isGameStart, isGameFinish, size, dispatch, user, delay, field]);\n\n  useEffect(() => {\n    if (isGameFinish) {\n      let date = dateFormat();\n      setWinner(winner, date).then((res) =>\n        dispatch({ type: actionsTypes.SET_WINNERS, payload: res.data })\n      );\n    }\n  }, [isGameFinish, dispatch, winner]);\n\n  return (\n    <>\n      <Grid item lg={4}>\n        <FormControl variant=\"filled\" className={classes.formControl}>\n          <InputLabel classes={{ root: classes.label }} id=\"select-mode-label\">\n            Pick game mode\n          </InputLabel>\n          <Select\n            input={<FilledInput classes={{ input: classes.input }} />}\n            labelId=\"select-mode-label\"\n            id=\"select-mode\"\n            value={mode}\n            label=\"Pick game mode\"\n            disabled={isGameStart}\n            onChange={(e) => setMode(e.target.value)}\n          >\n            {state.settings &&\n            Object.keys(state.settings).map((set, i) => (\n              <MenuItem key={set} value={set}>\n                {set}\n              </MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n      </Grid>\n      <Grid item lg={4}>\n        <FormControl className={classes.formControl}>\n          <TextField\n            size=\"small\"\n            label=\"Enter your name\"\n            variant=\"filled\"\n            onChange={(e) => setUserName(e.target.value)}\n            disabled={isGameStart}\n            value={user}\n          />\n        </FormControl>\n      </Grid>\n      <Grid item container lg={4}>\n        <Button\n          // variant=\"contained\"\n          onClick={() => dispatch({ type: actionsTypes.START_GAME })}\n          classes={{\n            root: classes.button,\n            disabled: classes.buttonDisabled,\n            contained: classes.buttonDisabled,\n          }}\n          color=\"primary\"\n          className={classes.button}\n          disabled={!mode || !user || isGameStart}\n        >\n          {isGameFinish ? \"Play again\" : \"Play\"}\n        </Button>\n      </Grid>\n      <Grid item xs={12}>\n      {winner && <h3 style={{ textAlign: \"center\" }}> {winner} win! </h3>}\n      </Grid>\n    </>\n  );\n}\n\n\nexport default SettingMode;\n"," export function dateFormat (){\n    const date = new Date()\n    let options = {\n      month: 'long',\n      year: 'numeric',\n    };\n    let formatDate =date.toLocaleDateString(\"en-US\", options);\n    let customDate =`${date.getHours()}:${ date.getMinutes()}; ${(\"0\" + date.getDate()).slice(-2)} ${formatDate}`\n    return customDate\n}","import React from \"react\";\nimport './Loader.scss'\n\n\nlet array = new Array(10).fill(\"element\");\nexport default function Loder() {\n\n  return (\n    <div class=\"loader\">\n       {array && array.map((el,i)=>{\n         return <span key={i} className=\"loader-block\"></span>\n       })}\n   \n    </div>\n  );\n}\n\n\n","import React, { useState, useEffect, useContext, useMemo } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Grid, Container } from \"@material-ui/core\";\nimport axios from \"axios\";\n//api\nimport { getSettings, getWinners } from \"./api/api\";\n//state\nimport { GameContext } from \"./state/reducer\";\nimport { actionsTypes } from \"./state/actionsTypes\";\n//components\nimport GameField from \"./components/GameField/GameField\";\nimport LeaderBoard from \"./components/LeaderBoard/LeaderBoard\";\nimport SettingMode from \"./components/SettingMode/SettingMode\";\nimport Loader from \"./components/Loader/Loader\";\n\n\n\nconst useStyles = makeStyles((theme) => ({\n  mainGrid: {\n    padding: theme.spacing(6),\n    border: \"2px solid #E7E7E9\",\n    minHeight: \"100vh\",\n    paddingTop: \"10%\",\n  },\n\n}));\n\nfunction Game() {\n  const classes = useStyles();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const { state, dispatch } = useContext(GameContext);\n  const { winners } = state;\n\n  useEffect(() => {\n    setIsError(false);\n    setIsLoading(true);\n    axios\n      .all([getSettings(), getWinners()])\n      .then(\n        axios.spread((...responses) => {\n          const [settings, winners] = responses;\n          dispatch({ type: actionsTypes.SET_SETTINGS, payload: settings.data });\n          dispatch({ type: actionsTypes.SET_WINNERS, payload: winners.data });\n        })\n      )\n      .catch((errors) => {\n        setIsError(true);\n      })\n      .finally(() => setIsLoading(false));\n  }, [dispatch]);\n\n  \n  // LeaderBoardMemo should rerender only when winners list change\n  const LeaderBoardMemo = useMemo(() => {\n    return <LeaderBoard winners={winners} />;\n  }, [winners]);\n\n  return (\n    <Container maxWidth=\"xl\">\n      <main>\n        {isError ? \"Something go wrong\" : null }\n        {isLoading ? (\n          <Loader />\n        ) : (\n          <Grid\n            className={classes.mainGrid}\n            container\n            direction=\"row\"\n            alignItems=\"flex-start\"\n            spacing={2}\n          >\n            <Grid container item spacing={2} alignItems=\"flex-start\" sm={6}>\n              <SettingMode />\n              <GameField />\n            </Grid>\n            <Grid container alignItems=\"center\" item sm={6}>\n              {LeaderBoardMemo}\n            </Grid>\n          </Grid>\n        )}\n      </main>\n    </Container>\n  );\n}\n\nexport default Game;\n","import React, { useContext, useReducer } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\n\n//context/reducer\nimport { GameContext } from \"./state/reducer\";\nimport reducer from \"./state/reducer\";\n//component\nimport Game from \"./Game\";\n\nconst App = () => {\n  const initialState = useContext(GameContext);\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <GameContext.Provider value={{ state, dispatch }}>\n      <Game />\n    </GameContext.Provider>\n  );\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}